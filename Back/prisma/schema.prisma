generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  salonOwner Salon?

  bookings Booking[]
  reviews  Review[]
  points   Points[]
}

model Salon {
  id          String     @id @default(uuid())
  name        String
  description String?
  address     String
  city        String
  phoneNumber String
  pictures    Picture[]
  ownerId     String   @unique
  owner       User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rating      Float

  services     Service[]
  bookings     Booking[]
  reviews      Review[]
  workingHours String
  workingDays  String
  coupons      Coupon[]
  points       Points[]
}

model Points {
  id         String   @id @default(uuid())
  customerId String
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  salonId    String
  salon      Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  balance    Int      @default(0) // Current points balance
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([customerId, salonId])
}

model Coupon {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Float
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  bookings  Booking[]

  @@unique([code, salonId])
}

model Picture {
  id        String   @id @default(uuid())
  url       String
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  pointPrice  Int?
  duration    Int
  salonId     String
  salon       Salon     @relation(fields: [salonId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  bookings    Booking[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Booking {
  id         String        @id @default(uuid())
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  customerId String
  customer   User          @relation(fields: [customerId], references: [id])
  serviceId  String
  service    Service       @relation(fields: [serviceId], references: [id])
  salonId    String
  salon      Salon         @relation(fields: [salonId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  coupon     Coupon?       @relation(fields: [couponId], references: [id])
  couponId   String?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  customerId String
  customer   User     @relation(fields: [customerId], references: [id])
  salonId    String
  salon      Salon    @relation(fields: [salonId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}